MyTrans <- read_baskets(con= xx.csv,sep=',',info = c('sequenceID','eventID'))
item <- factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
seqid <- c(1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,4)
eventid <- c(101,102,203,304,305,2001,2002,3003,3004,3005,5006,10001,30002,40003,300004,300005,400006,500007)
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
transactionInfo(data.trans)$sequenceID <- seqid
transactionInfo(data.trans)$eventID <- eventid
transactionInfo(data.trans)
result <- cspade(data.trans,parameter = list(support=0.5),control=list(verbose = TRUE))
MyTrans <- read_baskets(con= xx.csv,sep=',',info = c('sequenceID','eventID'))
# demo
item <- factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
seqid <- c(1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,4)
eventid <- c(101,102,203,304,305,2001,2002,3003,3004,3005,5006,10001,30002,40003,300004,300005,400006,500007)
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
transactionInfo(data.trans)$sequenceID <- seqid
transactionInfo(data.trans)$eventID <- eventid
transactionInfo(data.trans)
result <- cspade(data.trans,parameter = list(support=0.5),control=list(verbose = TRUE))
result <- cspade(data.trans,parameter = list(support=0.5),control=list(verbose = TRUE))
remove.packages("arulesSequences")
remove.packages("arulesSequences")
remove.packages("arulesSequences")
install.packages("arulesSequences")
library(arulesSequences)
MyTrans <- read_baskets(con= xx.csv,sep=',',info = c('sequenceID','eventID'))
item <- factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
seqid <- c(1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,4)
eventid <- c(101,102,203,304,305,2001,2002,3003,3004,3005,5006,10001,30002,40003,300004,300005,400006,500007)
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
transactionInfo(data.trans)$sequenceID <- seqid
transactionInfo(data.trans)$eventID <- eventid
transactionInfo(data.trans)
result <- cspade(data.trans,parameter = list(support=0.5),control=list(verbose = TRUE))
updateR()
setInternet2(TRUE)
updateR()
library("arules", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
library("arulesNBMiner", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arules")
library("arulesNBMiner", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arulesNBMiner")
library("arulesSequences", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arulesSequences")
library("arulesViz", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arulesViz")
install.packages("arules")
install.packages("arulesSequences")
install.packages("arulesViz")
library(arulesSequences)
MyTrans <- read_baskets(con= xx.csv,sep=',',info = c('sequenceID','eventID'))
item <- factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
seqid <- c(1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,4)
eventid <- c(101,102,203,304,305,2001,2002,3003,3004,3005,5006,10001,30002,40003,300004,300005,400006,500007)
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
transactionInfo(data.trans)$sequenceID <- seqid
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
library(arules)
data.trans <- as(data,'transactions')
library(arules)
install.packages("arules")
library(arulesSequences)
library(arules)
library("arulesSequences", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
library("arulesViz", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arulesSequences")
library("arulesViz", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arulesViz")
install.packages("arulesSequences")
install.packages("arules")
library(arulesSequences)
library(arules)
library("arulesSequences", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
library("assertthat", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
detach("package:assertthat", unload=TRUE)
remove.packages("arulesSequences")
install.packages("arulesSequences")
library(arulesSequences)
library(arules)
MyTrans <- read_baskets(con= xx.csv,sep=',',info = c('sequenceID','eventID'))
item <- factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
seqid <- c(1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,4)
eventid <- c(101,102,203,304,305,2001,2002,3003,3004,3005,5006,10001,30002,40003,300004,300005,400006,500007)
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
data.trans <- arules::as(data,'transactions')
data.trans <- arulesSequences::as(data,'transactions')
data.trans <- arulesSequences::as(data,'transactions')
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
install.packages(c("broom", "callr", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "foreign", "glue", "haven", "highr", "mgcv", "modelr", "munsell", "openssl", "pillar", "pkgconfig", "purrr", "Rcpp", "RcppArmadillo", "recommenderlab", "reprex", "rlang", "rmarkdown", "RMySQL", "sandwich", "scales", "stringi", "stringr", "survival", "tidyr", "TSA", "utf8", "vars", "xts", "yaml", "zoo"))
library(arulesSequences)
library(arules)
install.packages("arules")
install.packages("arules")
library(arulesSequences)
library(arules)
library("arulesSequences", lib.loc="D:/Program Files/R/R-3.5.0patched/library")
remove.packages("arulesSequences")
install.packages("arulesSequences")
library(arulesSequences)
library(arules)
install.packages("arulesSequences")
install.packages("arules")
library(arules)
library(arules)
library(data.table)
library(tidyverse)
library(arules)
library(arulesViz)
a_list <- list(c("a","b","c"),c("a","b"), c("a","b","d"), c("c","e"), c("a","b","d","e"))
library(data.table)
install.packages("data.table")
install.packages("tidyverse")
install.packages('arules',dependencies = TRUE)
install.packages('arulesViz',dependencies = TRUE)
install.packages('arulesSequences',dependencies = TRUE)
library(data.table)
library(tidyverse)
library(arules)
library(arulesViz)
library(arulesSequences)
install.packages('data.table',dependencies = TRUE)
a_list <- list(c("a","b","c"),c("a","b"), c("a","b","d"), c("c","e"), c("a","b","d","e"))
names(a_list) <- paste("Tr",c(1:5), sep = "")
trans1 <- as(a_list, "transactions")
summary(trans1)
image(trans1)
library(arulesSequences)
library(arules)
item <- factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
seqid <- c(1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,4,4)
eventid <- c(101,102,203,304,305,2001,2002,3003,3004,3005,5006,10001,30002,40003,300004,300005,400006,500007)
data <- data.frame(item = item)
data.trans <- as(data,'transactions')
transactionInfo(data.trans)$sequenceID <- seqid
transactionInfo(data.trans)$eventID <- eventid
transactionInfo(data.trans)
result <- cspade(data.trans,parameter = list(support=0.5))
result <- cspade(data.trans,parameter = list(support=0.5))
result <- cspade(data.trans,parameter = list(support=0.5))
library(factoextra)
install.packages("factoextra")
install.packages("cluster")
library(factoextra)
library(cluster)
install.packages("cluster")
library(factoextra)
library(cluster)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
library(data.table)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data_ori <- data %>% select(购物服务便民商店.便利店:购物服务综合市场)
str(data_initial)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data
data_ori <- data %>% select(购物服务便民商店.便利店:购物服务综合市场)
library(tidyverse)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data
install.packages("fpc")
library(fpc)
data_ori
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data_ori <- data %>% select(购物服务便民商店.便利店:购物服务综合市场)
data_ori
pamk.best <- pamk(data_ori)
pamk.best
pamk.best$nc
library(cluster)
clusplot(pam(data_ori, pamk.best$nc))
data_ori
scale(data_ori)
data_ori_used <- scale(data_ori)
data_ori_used
pamk.best <- pamk(data_ori_used)
pamk.best$nc
library(cluster)
clusplot(pam(data_ori_used, pamk.best$nc))
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data
matrix(c(1,2,3,4),2,2)
scale(matrix(c(1,2,3,4),2,2))
data_ori_used <- scale(data_ori)
data_ori_used
pamk.best <- pamk(data_ori_used)
pamk.best$nc
library(cluster)
clusplot(pam(data_ori_used, pamk.best$nc))
data_ori_used
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data_ori <- data %>% select(购物服务便民商店.便利店:购物服务综合市场)
data_ori
str(data_ori)
apply(data_ori,1,fivenum)
apply(data_ori,2,fivenum)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
pamk.best <- pamk(data)
data
data_ori <- data %>% select(餐饮服务:购物服务综合市场)
data_ori
pamk.best <- pamk(data_ori)
pamk.best$nc
library(cluster)
clusplot(pam(data_ori_used, pamk.best$nc))
clusplot(pam(data_ori, pamk.best$nc))
library(factoextra)
library(cluster)
library(data.table)
library(tidyverse)
library(fpc)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data_ori <- data %>% select(购物服务便民商店.便利店:购物服务综合市场)
data_ori
str(data_ori)
apply(data_ori,2,fivenum)
data_ori_used <- scale(data_ori)
data_ori_used
data_ori_used
data_initial <- data_ori_used %>% as.matrix()
data_initial
result<-get_clust_tendency(data_initial,40,graph = TRUE)
result$hopkins_stat
win.graph(width = 7,height = 7,pointsize = 8)
set.seed(222)
set.seed(123)
data_initial
gap_stat<-clusGap(data_initial,FUN = kmeans,nstart = 10,K.max = 30,B = 50)
summary(gap_stat)
win.graph(width = 7,height = 7,pointsize = 8)
fviz_gap_stat(gap_stat)
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
data_initial
data_initial
wssplot(data_initial)
library(factoextra)
library(ggplot2)
set.seed(1234)
data_initial
fviz_nbclust(data_initial, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
fviz_nbclust(data_initial, kmeans, method = "wss")
library(factoextra)
library(cluster)
library(data.table)
library(tidyverse)
library(fpc)
pamk.best <- pamk(data_ori)
data <-read.csv("C:\\Users\\hasee\\Desktop\\聚类数据_个数.csv") %>% as.data.table()
data_ori <- data %>% select(购物服务便民商店.便利店:购物服务综合市场)
data_ori
data_ori_used <- scale(data_ori)
data_ori_used
data_initial <- (data_ori)
data_initial
data_initial <- data_ori_used %>% as.matrix()
data_initial
result<-get_clust_tendency(data_initial,40,graph = TRUE)
result$hopkins_stat
set.seed(234)
gap_stat<-clusGap(data_initial,FUN = kmeans,nstart = 10,K.max = 30,B = 50)
summary(gap_stat)
fviz_gap_stat(gap_stat)
pamk.best <- pamk(data_initial)
pamk.best$nc
library(cluster)
clusplot(pam(data_ori, pamk.best$nc))
install.packages("vegan")
library(vegan)
data_initial
clusplot(pam(data_initial, pamk.best$nc))
library(vegan)
ca_clust <- cascadeKM(data_initial, 1, 10, iter = 1000)
ca_clust$results
calinski.best <- as.numeric(which.max(ca_clust$results[2,]))
calinski.best
data_initial
data_ori
data_ori
ca_clust <- cascadeKM(data = data_ori, 1, 10, iter = 1000)
ca_clust$results
data_ori
ca_clust <- cascadeKM(data_initial, 1, 30, iter = 1000)
??cascadeKM
ca_clust
ca_clust
ca_clust$results
calinski.best <- as.numeric(which.max(ca_clust$results[2,]))
calinski.best
install.packages("apcluster")
library(apcluster)
ap_clust <- apcluster(negDistMat(r=2), data_ori)
length(ap_clust@clusters)
ap_clust <- apcluster(negDistMat(r=2), data_initial)
length(ap_clust@clusters)
heatmap(ap_clust)
require(cluster)
library(factoextra)
fviz_nbclust(data_ori, kmeans, method = "silhouette")
fviz_nbclust(data_initial, kmeans, method = "silhouette")
set.seed(345)
gap_stat<-clusGap(data_initial,FUN = kmeans,nstart = 10,K.max = 30,B = 50)
fviz_gap_stat(gap_stat)
m_clust <- Mclust(as.matrix(dataset), G=1:30) #聚类数目从1一直试到20
summary(m_clust)
m_clust <- Mclust(as.matrix(data_initial), G=1:30) #聚类数目从1一直试到20
# bic准则
m_clust <- Mclust(as.matrix(data_in
library(mclust)
library(mclust)
m_clust <- Mclust(as.matrix(data_initial), G=1:30) #聚类数目从1一直试到20
summary(m_clust)
plot(m_clust,"BIC")
plot(m_clust,"BIC")
m_clust <- Mclust(as.matrix(data_ori), G=1:30)
library(NBclust)
set.seed(1234) #因为method选择的是kmeans，所以如果不设定种子，每次跑得结果可能不同
summary(m_clust)
plot(m_clust,"BIC")
library(NBclust)
set.seed(1234) #因为method选择的是kmeans，所以如果不设定种子，每次跑得结果可能不同
nb_clust <- NbClust(data_initial, distance = "euclidean",
min.nc=2, max.nc=15, method = "kmeans",
index = "alllong", alphaBeale = 0.1)
library(NBclust)
library(Nbclust)
install.packages("NbClust")
set.seed(1234) #因为method选择的是kmeans，所以如果不设定种子，每次跑得结果可能不同
nb_clust <- NbClust(data_initial, distance = "euclidean",
min.nc=2, max.nc=15, method = "kmeans",
index = "alllong", alphaBeale = 0.1)
library(Nbclust)
library(NbClust)
library(NbClust)
set.seed(1234) #因为method选择的是kmeans，所以如果不设定种子，每次跑得结果可能不同
nb_clust <- NbClust(data_initial, distance = "euclidean",
min.nc=2, max.nc=15, method = "kmeans",
index = "alllong", alphaBeale = 0.1)
wssplot <- function(data, nc=30, seed=1234){wss <- (nrow(data)-1)*sum(apply(data,2,var))for (i in 2:nc){set.seed(seed)wss[i] <- sum(kmeans(data, centers=i)$withinss)}plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")}
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")}
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
wss <- (nrow(data)-1)*sum(apply(data,2,var))
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
wssplot(data = data_ori)
wssplot(data = data_initial)
library(factoextra)
library(ggplot2)
set.seed(12234)
fviz_nbclust(dataset, kmeans, method = "wss")
fviz_nbclust(data_ori, kmeans, method = "wss") +geom_vline(xintercept = 3, linetype = 2)
fviz_nbclust(data_initial, kmeans, method = "wss")
km.res <- kmeans(dataset,3)
fviz_cluster(km.res, data = dataset)
km.res <- kmeans(data_ori,3)
fviz_cluster(km.res, data = dataset)
fviz_cluster(km.res, data = data_ori)
km.res <- kmeans(data_initial,3)
fviz_cluster(km.res, data = data_initial)
library(fpc)
pamk.best <- pamk(data_ori)
pamk.best$nc
library(cluster)
clusplot(pam(dataset, pamk.best$nc))
clusplot(pam(data_ori, pamk.best$nc))
pamk.best <- pamk(data_initial)
pamk.best$nc
library(vegan)
ca_clust <- cascadeKM(data_ori, 1, 30, iter = 1000)
ca_clust$results
ca_clust$results
calinski.best <- as.numeric(which.max(ca_clust$results[2,]))
calinski.best
ca_clust <- cascadeKM(data_initial, 1, 30, iter = 1000)
ca_clust$results
calinski.best <- as.numeric(which.max(ca_clust$results[2,]))
calinski.best
plot(fit, sortg = TRUE, grpmts.plot = TRUE)
calinski<-as.data.frame(ca_clust$results[2,])
calinski$cluster <- c(1:10)
library(ggplot2)
ggplot(calinski,aes(x = calinski[,2], y = calinski[,1]))+geom_line()
library(apcluster)
ap_clust <- apcluster(negDistMat(r=2), dataset)
ap_clust <- apcluster(negDistMat(r=2), data_ori)
length(ap_clust@clusters)
require(cluster)
library(factoextra)
fviz_nbclust(dataset, kmeans, method = "silhouette")
fviz_nbclust(data_ori, kmeans, method = "silhouette")
library(factoextra)
fviz_gap_stat(gap_clust)
gap_clust <- clusGap(dataset, kmeans, 10, B = 500, verbose = interactive())
gap_clust <- clusGap(data_ori, kmeans, 10, B = 500, verbose = interactive())
library(factoextra)
fviz_gap_stat(gap_clust)
fviz_gap_stat(gap_clust)
h_dist <- dist(as.matrix(dataset))
h_clust<-hclust(h_dist)
h_dist <- dist(as.matrix(data_ori))
h_clust<-hclust(h_dist)
plot(h_clust, hang = -1, labels = FALSE)
rect.hclust(h_clust,8)
gap_clust
fviz_gap_stat(gap_clust)
km_result<-kmeans(data_ori,6,nstart = 25)
km_result
win.graph(width = 20,height = 20,pointsize = 8)
fviz_cluster(km_result,data_try)
fviz_cluster(km_result,data_ori)
win.graph(width = 20,height = 20,pointsize = 8)
fviz_cluster(km_result,data_ori)
km_result<-kmeans(data_ori,8,nstart = 25)
win.graph(width = 20,height = 20,pointsize = 8)
fviz_cluster(km_result,data_ori)
km_result<-kmeans(data_ori,3,nstart = 25)
win.graph(width = 20,height = 20,pointsize = 8)
fviz_cluster(km_result,data_ori)
wssplot <- function(data, nc=30, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
wssplot(data = data_initial)
library(factoextra)
library(ggplot2)
set.seed(12234)
fviz_nbclust(data_ori, kmeans, method = "wss") +geom_vline(xintercept = 3, linetype = 2)
km.res <- kmeans(data_initial,3)
fviz_cluster(km.res, data = data_initial)
library(factoextra)
library(ggplot2)
km.res <- kmeans(data_initial,6)
fviz_cluster(km.res, data = data_initial)
